# S-DES implementation with CBC mode

P10 = [3, 5, 2, 7, 4, 10, 1, 9, 8, 6]
P8  = [6, 3, 7, 4, 8, 5, 10, 9]
P4  = [2, 4, 3, 1]
IP  = [2, 6, 3, 1, 4, 8, 5, 7]
IP_INV = [4, 1, 3, 5, 7, 2, 8, 6]
EP  = [4, 1, 2, 3, 2, 3, 4, 1]

S0 = [[1, 0, 3, 2],
[3, 2, 1, 0],
[0, 2, 1, 3],
[3, 1, 3, 2]]

S1 = [[0, 1, 2, 3],
[2, 0, 1, 3],
[3, 0, 1, 0],
[2, 1, 0, 3]]


def permute(bits, table):
return [bits[i - 1] for i in table]

def left_shift(bits, n):
return bits[n:] + bits[:n]

def xor(bits1, bits2):
return [b1 ^ b2 for b1, b2 in zip(bits1, bits2)]

def sbox(input_bits, sbox):
row = (input_bits[0] << 1) + input_bits[3]
col = (input_bits[1] << 1) + input_bits[2]
value = sbox[row][col]
return [int(x) for x in format(value, '02b')]

def fk(bits, key):
left = bits[:4]
right = bits[4:]
ep = permute(right, EP)
temp = xor(ep, key)
s0_out = sbox(temp[:4], S0)
s1_out = sbox(temp[4:], S1)
combined = permute(s0_out + s1_out, P4)
return xor(left, combined) + right

def switch(bits):
return bits[4:] + bits[:4]

def sdes_encrypt(plaintext_bits, key):
key = [int(k) for k in key]
k1, k2 = generate_keys(key)
bits = permute(plaintext_bits, IP)
bits = fk(bits, k1)
bits = switch(bits)
bits = fk(bits, k2)
return permute(bits, IP_INV)

def sdes_decrypt(ciphertext_bits, key):
key = [int(k) for k in key]
k1, k2 = generate_keys(key)
bits = permute(ciphertext_bits, IP)
bits = fk(bits, k2)
bits = switch(bits)
bits = fk(bits, k1)
return permute(bits, IP_INV)

def generate_keys(key_bits):
p10 = permute(key_bits, P10)
left = p10[:5]
right = p10[5:]
left1 = left_shift(left, 1)
right1 = left_shift(right, 1)
k1 = permute(left1 + right1, P8)
left2 = left_shift(left1, 2)
right2 = left_shift(right1, 2)
k2 = permute(left2 + right2, P8)
return k1, k2

def binary_str_to_list(s):
return [int(b) for b in s]

def cbc_encrypt(plaintext_blocks, key, iv):
ciphertext_blocks = []
prev = iv
for block in plaintext_blocks:
block = xor(block, prev)
encrypted = sdes_encrypt(block, key)
ciphertext_blocks.append(encrypted)
prev = encrypted
return ciphertext_blocks

def cbc_decrypt(ciphertext_blocks, key, iv):
plaintext_blocks = []
prev = iv
for block in ciphertext_blocks:
decrypted = sdes_decrypt(block, key)
plaintext_blocks.append(xor(decrypted, prev))
prev = block
return plaintext_blocks

# Helper: print binary lists as strings
def blocks_to_str(blocks):
return ' '.join(''.join(str(b) for b in blk) for blk in blocks)

# ---- TEST DATA ----

if __name__ == "__main__":
key = "0111111101"
iv = binary_str_to_list("10101010")

plaintext_binary = "00000001 00100011"
plaintext_blocks = [binary_str_to_list(b) for b in plaintext_binary.split()]

print("Plaintext:", blocks_to_str(plaintext_blocks))

ciphertext_blocks = cbc_encrypt(plaintext_blocks, key, iv)
print("Ciphertext:", blocks_to_str(ciphertext_blocks))

decrypted_blocks = cbc_decrypt(ciphertext_blocks, key, iv)
print("Decrypted:", blocks_to_str(decrypted_blocks))

Sample input :-   Plaintext: 00000001 00100011
Key:       0111111101
IV:        10101010
Sample output :-   Plaintext: 00000001 00100011
Ciphertext: 11110100 00001011
Decrypted: 00000001 00100011
